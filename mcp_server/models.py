# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:06:44+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class ClientAccessToken(RootModel[SecretStr]):
    root: SecretStr


class ClientMode(Enum):
    SOURCE = 'SOURCE'
    DESTINATION = 'DESTINATION'
    ALL = 'ALL'


class CloseTunnelResponse(BaseModel):
    pass


class ConnectionStatus(Enum):
    CONNECTED = 'CONNECTED'
    DISCONNECTED = 'DISCONNECTED'


class DateType(RootModel[datetime]):
    root: datetime


class DeleteFlag(RootModel[bool]):
    root: bool


class Description(RootModel[constr(pattern=r'[^\p{C}]{1,2048}')]):
    root: constr(pattern=r'[^\p{C}]{1,2048}')


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    resourceArn: AmazonResourceName


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NextToken(RootModel[constr(pattern=r'[a-zA-Z0-9_=-]{1,4096}')]):
    root: constr(pattern=r'[a-zA-Z0-9_=-]{1,4096}')


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class Service(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class ServiceList(RootModel[List[Service]]):
    root: List[Service] = Field(..., min_length=1)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class ThingName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class TimeoutInMin(RootModel[conint(ge=1, le=720)]):
    root: conint(ge=1, le=720)


class TunnelArn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class TunnelId(RootModel[constr(pattern=r'[a-zA-Z0-9_\-+=:]{1,128}')]):
    root: constr(pattern=r'[a-zA-Z0-9_\-+=:]{1,128}')


class TunnelStatus(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'


class TunnelSummary(BaseModel):
    createdAt: Optional[DateType] = None
    description: Optional[Description] = None
    lastUpdatedAt: Optional[DateType] = None
    status: Optional[TunnelStatus] = None
    tunnelArn: Optional[TunnelArn] = None
    tunnelId: Optional[TunnelId] = None


class TunnelSummaryList(RootModel[List[TunnelSummary]]):
    root: List[TunnelSummary]


class UntagResourceRequest(BaseModel):
    resourceArn: AmazonResourceName
    tagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class XAmzTarget(Enum):
    IoTSecuredTunneling_CloseTunnel = 'IoTSecuredTunneling.CloseTunnel'


class XAmzTarget1(Enum):
    IoTSecuredTunneling_DescribeTunnel = 'IoTSecuredTunneling.DescribeTunnel'


class XAmzTarget2(Enum):
    IoTSecuredTunneling_ListTagsForResource = 'IoTSecuredTunneling.ListTagsForResource'


class XAmzTarget3(Enum):
    IoTSecuredTunneling_ListTunnels = 'IoTSecuredTunneling.ListTunnels'


class XAmzTarget4(Enum):
    IoTSecuredTunneling_OpenTunnel = 'IoTSecuredTunneling.OpenTunnel'


class XAmzTarget5(Enum):
    IoTSecuredTunneling_RotateTunnelAccessToken = (
        'IoTSecuredTunneling.RotateTunnelAccessToken'
    )


class XAmzTarget6(Enum):
    IoTSecuredTunneling_TagResource = 'IoTSecuredTunneling.TagResource'


class XAmzTarget7(Enum):
    IoTSecuredTunneling_UntagResource = 'IoTSecuredTunneling.UntagResource'


class CloseTunnelRequest(BaseModel):
    delete: Optional[DeleteFlag] = None
    tunnelId: TunnelId


class ConnectionState(BaseModel):
    lastUpdatedAt: Optional[DateType] = None
    status: Optional[ConnectionStatus] = None


class DescribeTunnelRequest(BaseModel):
    tunnelId: TunnelId


class DestinationConfig(BaseModel):
    services: ServiceList
    thingName: Optional[ThingName] = None


class ListTunnelsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    thingName: Optional[ThingName] = None


class ListTunnelsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    tunnelSummaries: Optional[TunnelSummaryList] = None


class OpenTunnelResponse(BaseModel):
    destinationAccessToken: Optional[ClientAccessToken] = None
    sourceAccessToken: Optional[ClientAccessToken] = None
    tunnelArn: Optional[TunnelArn] = None
    tunnelId: Optional[TunnelId] = None


class RotateTunnelAccessTokenRequest(BaseModel):
    clientMode: ClientMode
    destinationConfig: Optional[DestinationConfig] = None
    tunnelId: TunnelId


class RotateTunnelAccessTokenResponse(BaseModel):
    destinationAccessToken: Optional[ClientAccessToken] = None
    sourceAccessToken: Optional[ClientAccessToken] = None
    tunnelArn: Optional[TunnelArn] = None


class Tag(BaseModel):
    key: TagKey
    value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=1)


class TagResourceRequest(BaseModel):
    resourceArn: AmazonResourceName
    tags: TagList


class TimeoutConfig(BaseModel):
    maxLifetimeTimeoutMinutes: Optional[TimeoutInMin] = None


class Tunnel(BaseModel):
    createdAt: Optional[DateType] = None
    description: Optional[Description] = None
    destinationConfig: Optional[DestinationConfig] = None
    destinationConnectionState: Optional[ConnectionState] = None
    lastUpdatedAt: Optional[DateType] = None
    sourceConnectionState: Optional[ConnectionState] = None
    status: Optional[TunnelStatus] = None
    tags: Optional[TagList] = None
    timeoutConfig: Optional[TimeoutConfig] = None
    tunnelArn: Optional[TunnelArn] = None
    tunnelId: Optional[TunnelId] = None


class DescribeTunnelResponse(BaseModel):
    tunnel: Optional[Tunnel] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagList] = None


class OpenTunnelRequest(BaseModel):
    description: Optional[Description] = None
    destinationConfig: Optional[DestinationConfig] = None
    tags: Optional[TagList] = None
    timeoutConfig: Optional[TimeoutConfig] = None
